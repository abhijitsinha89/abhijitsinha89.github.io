'use strict';

var app = angular.module('app', [
    'ngRoute',
    'ngSanitize'
]);
app.constant('routes', getRoutes());

// Configure the routes and route resolvers
app.config(['$routeProvider', '$locationProvider', 'routes', routeConfigurator]);
function routeConfigurator($routeProvider,$locationProvider, routes) {

    routes.forEach(function (r) {
        $routeProvider.when(r.url, r.config);
    });
    $routeProvider.otherwise({ redirectTo: '/' });

}

// Define the routes
function getRoutes() {
    return [
        {
            url: '/',
            config: {
                title: 'home',
                templateUrl:  'app/upload/upload.html'
            }
        }
    ];
}
app.directive('dragSwapFiles', function() {
	return {
		restrict: 'A',
		scope: {
			file: '=',
			fileName: '='
		},
		link: function(scope, element, attrs) {
			var enableDragDrop, dragStart,allowDrop,drag,drop;


			enableDragDrop = function(event) {
				if (event !== null) {
					event.preventDefault();
					event.dataTransfer.effectAllowed = 'move';
				}
			};


			drag = function(ev) {
			    ev.dataTransfer.setData("src", ev.target.id);
			}

			dragStart = function(event) {
				event.dataTransfer.setData("src", event.target.id);
			}

			element.bind('dragover', enableDragDrop);
			element.bind('dragenter', enableDragDrop);
			element.bind('dragstart', drag);


			return element.bind('drop', function(event) {
				    event.preventDefault();
    var src = document.getElementById(event.dataTransfer.getData("src"));
    var srcParent = src.parentNode;
    var tgt = event.currentTarget.firstElementChild;

    event.currentTarget.replaceChild(src, tgt);
    srcParent.appendChild(tgt);
			});
		}
	};
});

app.directive('dragImageFiles', function() {
	return {
		restrict: 'A',
		scope: {
			file: '=',
			fileName: '='
		},
		link: function(scope, element, attrs) {
			var isTypeValid,
			enableDragDrop,
			validMimeTypes = attrs.dragImageFiles;

			enableDragDrop = function(event) {
				if (event !== null) {
					event.preventDefault();
					event.dataTransfer.effectAllowed = 'copy';
				}
			};

			isTypeValid = function(type) {
				if (validMimeTypes.indexOf(type) > -1) {
					return true;
				}
				else {
					alert('Invalid file type, file must be one of following types ' + validMimeTypes);
					return false;
				}
			};

			element.bind('dragover', enableDragDrop);
			element.bind('dragenter', enableDragDrop);

			return element.bind('drop', function(event) {
				var file, name, reader, size, type;

				if (event !== null) {
					event.preventDefault();

					reader = new FileReader();

					file = event.dataTransfer.files[0];
					reader.readAsDataURL(file);
					name = file.name;
					type = file.type;
					size = file.size;

					reader.onload = function(evt) {
						if (isTypeValid(type)) {
							return scope.$apply(function() {
								scope.file = evt.target.result;
								element.addClass('lowerZindex');
								return scope.fileName = name;
							});
						}
					};
					return false;
				}
			});
		}
	};
});

app.service('UpdateImage', [ '$http', function($http) {

var createImage = function (newImage) {
        return {
            orderId: newImage.orderId,
            label: newImage.label,
            fileName: newImage.fileName
        };
    },
    images;

this.updateImageObject = function (imageDetails) {
    if(images[imageDetails.orderId]) {
        images[imageDetails.orderId].fileName =  imageDetails.fileName;
    }
}

this.createNewImage = function (imageDetails) {
    if(!images[imageDetails.orderId]) {
        images[imageDetails.orderId] =  createImage(imageDetails);
    }
}

}]);
app.controller('Upload', ['$scope', '$http', function($scope, $http) {
   $scope.imagePlaceholder = ['View 1','View 2','View 3','View 4','View 5', 'View 6'];
   $scope.image = null;
    $scope.imageFileName = '';
}]);